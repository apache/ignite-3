/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'application'
}

configurations {
    dbArtifacts
    cliArtifacts
    cliScripts
}

dependencies {
    dbArtifacts(project(':ignite-runner'))
    cliArtifacts(project(':ignite-cli'))
    cliScripts(project(path: ':ignite-cli', configuration: 'cliScripts'))
}

// task that generates start script for cli
task cliStartScript(type: CreateStartScripts) {
    // will be passed to exec "java ... <mainClassName>"
    mainClassName = "org.apache.ignite.internal.cli.Main"
    // forms a classpath string that will be passed to exec "java -cp <classpath> .."
    // it is expected to locate the "lib" dir together with "bin"
    classpath = files(new File("../lib/${project(':ignite-cli').name}-${project(':ignite-cli').version}.jar"), new File("../lib/*"))
    outputDir = startScripts.outputDir
    applicationName = 'ignite3-cli'
}

distributions {
    db {
        startScripts.enabled = false
        distributionBaseName = 'ignite3-db'
        contents {
            // create empty dirs that are required to start Ignite
            into('') {
                File.createTempDir().with {
                    ["log", "etc", "work"].each {new File(absolutePath, it).mkdirs() }
                    from (absolutePath) {
                        includeEmptyDirs = true
                    }
                }
            }
            into('') {
                from ("$rootDir/LICENSE")
                from ("$rootDir/NOTICE")
                from ("$rootDir/assembly/README.md")
            }
            into('etc') {
                from ("$rootDir/packaging/scripts/bootstrap-config")
                from ("$rootDir/packaging/config/ignite-config.conf")
                from ("$rootDir/packaging/config/ignite.java.util.logging.properties")
            }
            into('bin') {
                fileMode 0755
                from ("$rootDir/packaging/scripts/ignite3-db.sh")
            }
            into('lib') {
                from(configurations.dbArtifacts)
            }
        }
    }

    cli {
        startScripts.applicationName ='ignite3-cli'
        distributionBaseName = 'ignite3-cli'
        contents {
            into('') {
                File.createTempDir().with {
                    ["log"].each {new File(absolutePath, it).mkdirs() }
                    from (absolutePath) {
                        includeEmptyDirs = true
                    }
                }
            }
            into('') {
                from ("$rootDir/LICENSE")
                from ("$rootDir/NOTICE")
                from ("$rootDir/assembly/README.md")
            }
            into('bin') {
                duplicatesStrategy= DuplicatesStrategy.EXCLUDE
                from(configurations.cliScripts)
                from(cliStartScript)
                fileMode = 0755
            }
            into('lib') {
                from(configurations.cliArtifacts)
            }
        }
    }
}


// create an uber zip with all distributions
task allDistZip(type: Zip) {
    archiveBaseName = "ignite3"
    def allZipFiles = cliDistZip.outputs.files + dbDistZip.outputs.files
    allZipFiles.each {
        from(zipTree(it))
    }
}

allDistZip.dependsOn cliDistZip, dbDistZip
