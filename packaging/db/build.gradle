/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'distribution'
    id 'signing'
    alias(libs.plugins.nebula)
    alias(libs.plugins.checksum)
    alias(libs.plugins.setupbuilder)
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.crypto.checksum.Checksum

configurations {
    dbArtifacts
    defaultsGenerator.extendsFrom(dbArtifacts)
    dbZip {
        canBeConsumed = true
        canBeResolved = false
    }
    dbRelease {
        canBeConsumed = true
        canBeResolved = false
    }
    localDefaults {
        canBeConsumed = true
        canBeResolved = false
    }
}

dependencies {
    dbArtifacts project(':ignite-runner')

    defaultsGenerator project(path: ':ignite-runner', configuration: 'defaultsGenerator')
}

def tokens = [
        PRODUCT_NAME        : 'ignite3db',
        PACKAGE_NAME        : 'ignite3-db',
        PRODUCT_DISPLAY_NAME: 'Apache Ignite',
        APP_JAR             : "${project(':ignite-runner').name}-${project(':ignite-runner').version}.jar".toString(),
        MAIN_CLASS          : 'org.apache.ignite.internal.app.IgniteRunner',
        VARS_FILE_NAME      : 'vars.env',
        BOOTSTRAP_FILE_NAME : 'bootstrap-functions.sh',
        SETUP_JAVA_FILE_NAME: 'setup-java.sh'
]

// ZIP packaging

def zipStartScriptTokens = tokens + [
        LOG_DIR             : '${IGNITE_HOME}/log',
        APP_LOG_DIR         : 'log', // java logging does not support env variables, using relative path here
        LIB_DIR             : '${IGNITE_HOME}/lib',
        CONF_DIR            : '${IGNITE_HOME}/etc',
        INSTALL_DIR         : '${IGNITE_HOME}'
]

task replaceZipScriptVars(type: Copy) {
    from "$rootDir/packaging/common"
    from "$rootDir/packaging/zip"
    from "$rootDir/packaging/db/ignite.java.util.logging.properties"

    filter(ReplaceTokens, tokens: zipStartScriptTokens)

    into "$buildDir/zip/"
}

def copyConfig = tasks.register('copyConfig', Copy) {
    from "$rootDir/packaging/config/ignite-config.conf"
    into layout.buildDirectory.dir("config")
}

def generateConfigDefaults = tasks.register('generateConfigDefaults', JavaExec) {
    classpath = configurations.defaultsGenerator
    mainClass = "org.apache.ignite.internal.configuration.generator.DefaultsGenerator"
    dependsOn copyConfig
    args layout.buildDirectory.file("config/ignite-config.conf").get()
    outputs.file layout.buildDirectory.file("config/ignite-config.conf")
}

distributions {
    main {
        distributionBaseName = 'ignite3-db'
        contents {
            // create empty dirs that are required to start Ignite
            into('') {
                File.createTempDir().with {
                    ["log", "etc", "work"].each { new File(absolutePath, it).mkdirs() }
                    from(absolutePath) {
                        includeEmptyDirs = true
                    }
                }
            }
            into('') {
                from "$rootDir/LICENSE"
                from "$rootDir/NOTICE"
                from "$rootDir/assembly/README.md"
            }
            into('etc') {
                from "$buildDir/zip/${zipStartScriptTokens.VARS_FILE_NAME}"
                from generateConfigDefaults
                from "$buildDir/zip/ignite.java.util.logging.properties"
            }
            into('bin') {
                fileMode 0755
                from "$buildDir/zip/ignite3db"
            }
            into('lib') {
                from configurations.dbArtifacts
                from "$buildDir/zip/${zipStartScriptTokens.BOOTSTRAP_FILE_NAME}"
                from "$buildDir/zip/${zipStartScriptTokens.SETUP_JAVA_FILE_NAME}"
            }
        }
    }
}

distZip.dependsOn replaceZipScriptVars
distTar.dependsOn replaceZipScriptVars

task createChecksums(type: Checksum) {
    dependsOn distZip

    inputFiles.from distZip.outputs.files
    checksumAlgorithm = Checksum.Algorithm.SHA512
}

artifacts {
    dbZip(distZip)
    localDefaults generateConfigDefaults
}

// Explicitly create task so that the resulting artifact is not added to the configuration
tasks.register('signDbZip', Sign) {
    sign configurations.dbZip
}

// RPM/DEB packaging

def packageTokens = tokens + [
        USERNAME            : 'ignite3',
        GROUPNAME           : 'ignite3',
        INSTALL_DIR         : '/usr/share/ignite3db',
        CONF_DIR            : '/usr/share/ignite3db/etc',
        LOG_DIR             : '/var/log/ignite3db',
        APP_LOG_DIR         : '/var/log/ignite3db',
        PID_DIR             : '/var/run/ignite3db',
        LIB_DIR             : '/usr/share/ignite3db/lib',
        IGNITE_WORK_DIR     : '/usr/share/ignite3db/work',
        IGNITE_CONF_FILE    : 'ignite-config.conf'
]


task replacePackageScriptVars(type: Copy) {
    from "$rootDir/packaging/linux"
    from "$rootDir/packaging/db/ignite.java.util.logging.properties"
    from "$rootDir/packaging/common"
    filter(ReplaceTokens, tokens: packageTokens)
    into "$buildDir/linux"
}

buildRpm {
    dependsOn replacePackageScriptVars
    configurationFile = "/etc/ignite3/vars.env"

    installUtils file("$buildDir/linux/service/vars.env")
    installUtils file("$buildDir/linux/common.sh")
    preInstall file("$buildDir/linux/preInstall.sh")
    postInstall file("$buildDir/linux/postInstall.sh")
    preUninstall file("$buildDir/linux/rpm/preUninstall.sh")
    postUninstall file("$buildDir/linux/rpm/postUninstall.sh")
}

buildDeb {
    signingKeyId = project.findProperty("signing.keyId")
    signingKeyPassphrase = project.findProperty("signing.password")
    signingKeyRingFile = project.hasProperty("signing.secretKeyRingFile") ? file(project.property("signing.secretKeyRingFile")) : null
    dependsOn replacePackageScriptVars
    configurationFile = "/etc/ignite3/vars.env"

    installUtils file("$buildDir/linux/service/vars.env")
    installUtils file("$buildDir/linux/common.sh")
    preInstall file("$buildDir/linux/preInstall.sh")
    postInstall file("$buildDir/linux/postInstall.sh")
    preUninstall file("$buildDir/linux/deb/preUninstall.sh")
    postUninstall file("$buildDir/linux/deb/postUninstall.sh")
}

ospackage {
    license "ASL 2.0"
    packageName packageTokens.PACKAGE_NAME
    packageGroup "System Environment/Daemons"
    url "https://ignite.apache.org"
    user packageTokens.USERNAME
    packageDescription "This package will install Apache Ignite"
    os LINUX

    into(packageTokens.INSTALL_DIR) {
        into('') {
            from "$buildDir/linux/service/ignite3db.service"
            from "$buildDir/linux/service/ignite3db.conf"
            from("$buildDir/linux/start.sh") {
                fileMode 0755
            }
        }

        into('lib') {
            from configurations.dbArtifacts
            from "$buildDir/linux/${zipStartScriptTokens.BOOTSTRAP_FILE_NAME}"
            from "$buildDir/linux/${zipStartScriptTokens.SETUP_JAVA_FILE_NAME}"
        }

        into('etc') {
            fileType CONFIG
            from "$buildDir/linux/service/vars.env"
            from "$buildDir/linux/ignite.java.util.logging.properties"
            from generateConfigDefaults
        }

        into('etc') {
            from sourceSets.main.resources
        }
    }
    link "/etc/ignite3db", "${packageTokens.INSTALL_DIR}/etc/"
    link "/opt/ignite3db", "${packageTokens.INSTALL_DIR}"
}



if (project.hasProperty('prepareRelease')) {
    artifacts {
        dbRelease(file("$buildDir/distributions")) {
            builtBy signDbZip, buildDeb, buildRpm
        }
        dbRelease(file("$buildDir/checksums")) {
            builtBy createChecksums
        }
    }
}

setupBuilder {
    vendor = "Apache Software Foundation"
    application = "Apache Ignite"
    description = "Apache Ignite is a distributed database for high-performance computing with in-memory speed"
    appIdentifier = "ignite3-db"

    // '-SNAPSHOT' is not valid in Windows versions
    version = project.version.toString().replace("-SNAPSHOT", "")

    // Actually a classpath
    mainJar = "lib\\*"
    mainClass = "org.apache.ignite.internal.app.IgniteRunner"

    licenseFile = "$rootDir/LICENSE"

    msi {
        languages = ["en-US"]
    }

    service {
        // The working directory of the service, relative to installation root
        workDir = "."

        jvm = '%JAVA_HOME%\\bin\\server\\jvm.dll'

        javaVMArguments = ["--add-opens=java.base/java.lang=ALL-UNNAMED",
                           "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
                           "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
                           "--add-opens=java.base/java.io=ALL-UNNAMED",
                           "--add-opens=java.base/java.nio=ALL-UNNAMED",
                           "--add-opens=java.base/java.math=ALL-UNNAMED",
                           "--add-opens=java.base/java.util=ALL-UNNAMED",
                           "--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED",
                           "--add-opens=java.base/jdk.internal.access=ALL-UNNAMED",
                           "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
                           "-Dio.netty.tryReflectionSetAccessible=true",
                           "-Djava.util.logging.config.file=etc\\ignite.java.util.logging.properties",
                           "-Dio.netty.tryReflectionSetAccessible=true"]

        startArguments = "--node-name node1 --work-dir work --config-path etc\\ignite-config.conf"
    }

    into('') {
        into('') {
            from("$rootDir/LICENSE")
            from("$rootDir/NOTICE")
            from("$rootDir/assembly/README.md")
        }
        into('log') {
            from('log')
        }
        into('etc') {
            from generateConfigDefaults
        }
        into('etc') {
            from("ignite.java.util.logging.properties")
            filter(ReplaceTokens, tokens: [LOG_DIR: 'log'])
        }
        into('lib') {
            from configurations.dbArtifacts
        }
    }
}
