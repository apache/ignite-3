/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'distribution'
    alias(libs.plugins.nebula)
}

configurations {
    dbArtifacts
}

import org.apache.tools.ant.filters.ReplaceTokens

dependencies {
    dbArtifacts(project(':ignite-runner'))
}

// ZIP packaging

distributions {
    main {
        distributionBaseName = 'ignite3db'
        contents {
            // create empty dirs that are required to start Ignite
            into('') {
                File.createTempDir().with {
                    ["log", "etc", "work"].each { new File(absolutePath, it).mkdirs() }
                    from(absolutePath) {
                        includeEmptyDirs = true
                    }
                }
            }
            into('') {
                from("$rootDir/LICENSE")
                from("$rootDir/NOTICE")
                from("$rootDir/assembly/README.md")
            }
            into('etc') {
                from("$rootDir/packaging/zip/bootstrap-config.env")
                from("$rootDir/packaging/config/ignite-config.conf")
                from("$rootDir/packaging/config/ignite.java.util.logging.properties")
            }
            into('bin') {
                fileMode 0755
                from("$rootDir/packaging/zip/ignite3db.sh")
            }
            into('lib') {
                from configurations.dbArtifacts
            }
        }
    }
}

// Expose zip artifacts to be consumed by others
configurations {
    dbZip {
        canBeConsumed = true
        canBeResolved = false
    }
}

artifacts {
    dbZip(distZip) {
        builtBy(distZip)
    }
}

// RPM/DEB packaging

def javaArgs = '-Dio.netty.tryReflectionSetAccessible=true ' +
        '-Djava.util.logging.config.file=$CONFIG_PATH/ignite.java.util.logging.properties'

def args = '--config-path $IGNITE_CONFIG_FILE --work-dir $WORK_PATH $NODE_NAME'

def tokens = [
        PRODUCT_NAME        : 'ignite3db',
        PRODUCT_DISPLAY_NAME: 'Apache Ignite',
        APP_JAR             : "${project(':ignite-runner').name}-${project(':ignite-runner').version}.jar".toString(),
        MAIN_CLASS          : 'org.apache.ignite.app.IgniteCliRunner',
        ADDITIONAL_OPTS     : '',
        JAVA_OPTS           : javaArgs,
        ARGS                : args
]

def packageTokens = tokens + [
        USERNAME            : 'ignite3',
        GROUPNAME           : 'ignite3',
        INSTALL_DIR         : '/usr/share/ignite3db',
        CONF_DIR            : '/usr/share/ignite3db/etc',
        LOG_DIR             : '/var/log/ignite3db',
        PID_DIR             : '/var/run/ignite3db',
        LIB_DIR             : '/usr/share/ignite3db/lib',
        IGNITE_WORK_DIR     : '/usr/share/ignite3db/work',
        VARS_FILE_NAME      : 'vars.env',
        IGNITE_CONF_FILE    : 'ignite-config.conf',
        ENV_FILE            : '/usr/share/ignite3db/etc/vars.env'
]


task replacePackageScriptVars(type: Copy) {
    from("${rootDir}/packaging/linux")
    from("${rootDir}/packaging/db/ignite.java.util.logging.properties")
    filter(ReplaceTokens, tokens: packageTokens)
    into("${buildDir}/linux")
}

buildRpm {
    dependsOn replacePackageScriptVars
    configurationFile = "/etc/ignite3/vars.env"

    installUtils file("${buildDir}/linux/service/vars.env")
    installUtils file("${buildDir}/linux/common.sh")
    preInstall file("${buildDir}/linux/preInstall.sh")
    postInstall file("${buildDir}/linux/postInstall.sh")
    preUninstall file("${buildDir}/linux/rpm/preUninstall.sh")
    postUninstall file("${buildDir}/linux/rpm/postUninstall.sh")
}

buildDeb {
    dependsOn replacePackageScriptVars
    configurationFile = "/etc/ignite3/vars.env"

    installUtils file("${buildDir}/linux/service/vars.env")
    installUtils file("${buildDir}/linux/common.sh")
    preInstall file("${buildDir}/linux/preInstall.sh")
    postInstall file("${buildDir}/linux/postInstall.sh")
    preUninstall file("${buildDir}/linux/deb/preUninstall.sh")
    postUninstall file("${buildDir}/linux/deb/postUninstall.sh")
}

ospackage {
    license "ASL 2.0"
    packageName packageTokens.PRODUCT_NAME
    packageGroup "System Environment/Daemons"
    url "https://ignite.apache.org"
    user packageTokens.USERNAME
    packageDescription "This package will install Apache Ignite"
    os LINUX

    into(packageTokens.INSTALL_DIR) {
        into("") {
            from "${buildDir}/linux/service/ignite3db.service"
            from "${buildDir}/linux/service/ignite3db.conf"
            from("${buildDir}/linux/start.sh") {
                fileMode 0755
            }
        }

        into("lib") {
            from configurations.dbArtifacts
        }

        into("etc") {
            fileType CONFIG
            from "${buildDir}/linux/service/vars.env"
            from "${buildDir}/linux/ignite.java.util.logging.properties"
            from "${rootDir}/packaging/config/ignite-config.conf"
        }

        into("etc") {
            from sourceSets.main.resources
        }
    }
    link "/etc/ignite3db", "${packageTokens.INSTALL_DIR}/etc/"
    link "/opt/ignite3db", "${packageTokens.INSTALL_DIR}"
}
