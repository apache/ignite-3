Limit
    fetch: 100
    est: (rows=1)
  Project
      fieldNames: [B1_LP, B1_CNT, B1_CNTD, B2_LP, B2_CNT, B2_CNTD, B3_LP, B3_CNT, B3_CNTD, B4_LP, B4_CNT, B4_CNTD, B5_LP, B5_CNT, B5_CNTD, B6_LP, B6_CNT, B6_CNTD]
      projection: [B1_LP, B1_CNT, B1_CNTD, B2_LP, B2_CNT, B2_CNTD, B3_LP, B3_CNT, B3_CNTD, B4_LP, B4_CNT, B4_CNTD, B5_LP, B5_CNT, B5_CNTD, B6_LP, B6_CNT, B6_CNTD]
      est: (rows=1)
    NestedLoopJoin
        predicate: true
        type: inner
        est: (rows=1)
      NestedLoopJoin
          predicate: true
          type: inner
          est: (rows=1)
        NestedLoopJoin
            predicate: true
            type: inner
            est: (rows=1)
          NestedLoopJoin
              predicate: true
              type: inner
              est: (rows=1)
            NestedLoopJoin
                predicate: true
                type: inner
                est: (rows=1)
              ColocatedHashAggregate
                  fieldNames: [B2_LP, B2_CNT, B2_CNTD]
                  group: []
                  aggregation: [AVG(SS_LIST_PRICE), COUNT(SS_LIST_PRICE), COUNT(DISTINCT SS_LIST_PRICE)]
                  est: (rows=1)
                Exchange
                    distribution: single
                    est: (rows=180025)
                  TableScan
                      table: PUBLIC.STORE_SALES
                      predicate: AND(SEARCH(SS_QUANTITY, Sarg[[6..10]]), OR(AND(>=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), 152.00), <=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), CAST(+(152, 10)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), 2196.00), <=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), CAST(+(2196, 1000)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), 56.00), <=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), CAST(+(56, 20)):DECIMAL(12, 2) NOT NULL))))
                      fieldNames: [SS_LIST_PRICE]
                      est: (rows=180025)
              ColocatedHashAggregate
                  fieldNames: [B3_LP, B3_CNT, B3_CNTD]
                  group: []
                  aggregation: [AVG(SS_LIST_PRICE), COUNT(SS_LIST_PRICE), COUNT(DISTINCT SS_LIST_PRICE)]
                  est: (rows=1)
                Exchange
                    distribution: single
                    est: (rows=180025)
                  TableScan
                      table: PUBLIC.STORE_SALES
                      predicate: AND(SEARCH(SS_QUANTITY, Sarg[[11..15]]), OR(AND(>=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), 53.00), <=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), CAST(+(53, 10)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), 3430.00), <=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), CAST(+(3430, 1000)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), 13.00), <=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), CAST(+(13, 20)):DECIMAL(12, 2) NOT NULL))))
                      fieldNames: [SS_LIST_PRICE]
                      est: (rows=180025)
            ColocatedHashAggregate
                fieldNames: [B4_LP, B4_CNT, B4_CNTD]
                group: []
                aggregation: [AVG(SS_LIST_PRICE), COUNT(SS_LIST_PRICE), COUNT(DISTINCT SS_LIST_PRICE)]
                est: (rows=1)
              Exchange
                  distribution: single
                  est: (rows=180025)
                TableScan
                    table: PUBLIC.STORE_SALES
                    predicate: AND(SEARCH(SS_QUANTITY, Sarg[[16..20]]), OR(AND(>=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), 182.00), <=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), CAST(+(182, 10)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), 3262.00), <=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), CAST(+(3262, 1000)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), 20.00), <=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), CAST(+(20, 20)):DECIMAL(12, 2) NOT NULL))))
                    fieldNames: [SS_LIST_PRICE]
                    est: (rows=180025)
          ColocatedHashAggregate
              fieldNames: [B6_LP, B6_CNT, B6_CNTD]
              group: []
              aggregation: [AVG(SS_LIST_PRICE), COUNT(SS_LIST_PRICE), COUNT(DISTINCT SS_LIST_PRICE)]
              est: (rows=1)
            Exchange
                distribution: single
                est: (rows=180025)
              TableScan
                  table: PUBLIC.STORE_SALES
                  predicate: AND(SEARCH(SS_QUANTITY, Sarg[[26..30]]), OR(AND(>=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), 180.00), <=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), CAST(+(180, 10)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), 12592.00), <=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), CAST(+(12592, 1000)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), 22.00), <=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), CAST(+(22, 20)):DECIMAL(12, 2) NOT NULL))))
                  fieldNames: [SS_LIST_PRICE]
                  est: (rows=180025)
        ColocatedHashAggregate
            fieldNames: [B1_LP, B1_CNT, B1_CNTD]
            group: []
            aggregation: [AVG(SS_LIST_PRICE), COUNT(SS_LIST_PRICE), COUNT(DISTINCT SS_LIST_PRICE)]
            est: (rows=1)
          Exchange
              distribution: single
              est: (rows=180025)
            TableScan
                table: PUBLIC.STORE_SALES
                predicate: AND(SEARCH(SS_QUANTITY, Sarg[[0..5]]), OR(AND(>=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), 73.00), <=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), CAST(+(73, 10)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), 7826.00), <=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), CAST(+(7826, 1000)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), 70.00), <=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), CAST(+(70, 20)):DECIMAL(12, 2) NOT NULL))))
                fieldNames: [SS_LIST_PRICE]
                est: (rows=180025)
      ColocatedHashAggregate
          fieldNames: [B5_LP, B5_CNT, B5_CNTD]
          group: []
          aggregation: [AVG(SS_LIST_PRICE), COUNT(SS_LIST_PRICE), COUNT(DISTINCT SS_LIST_PRICE)]
          est: (rows=1)
        Exchange
            distribution: single
            est: (rows=180025)
          TableScan
              table: PUBLIC.STORE_SALES
              predicate: AND(SEARCH(SS_QUANTITY, Sarg[[21..25]]), OR(AND(>=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), 85.00), <=(CAST(SS_LIST_PRICE):DECIMAL(12, 2), CAST(+(85, 10)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), 3310.00), <=(CAST(SS_COUPON_AMT):DECIMAL(12, 2), CAST(+(3310, 1000)):DECIMAL(12, 2) NOT NULL)), AND(>=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), 37.00), <=(CAST(SS_WHOLESALE_COST):DECIMAL(12, 2), CAST(+(37, 20)):DECIMAL(12, 2) NOT NULL))))
              fieldNames: [SS_LIST_PRICE]
              est: (rows=180025)
