# Pruning from a simple scan
N1
SELECT * FROM t1_n1n2n3 WHERE id = 0
---
Fragment#0 root
  distribution: single
  executionNodes: [N1]
  exchangeSourceNodes: {1=[N2]}
  tree: 
    Receiver
        fieldNames: [ID, C1, C2]
        sourceFragmentId: 1
        est: (rows=1)

Fragment#1
  distribution: table PUBLIC.T1_N1N2N3 in zone ZONE_1
  executionNodes: [N2]
  targetNodes: [N1]
  partitions: [T1_N1N2N3=[N2={1}]]
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      TableScan
          table: PUBLIC.T1_N1N2N3
          predicate: =(ID, 0)
          fieldNames: [ID, C1, C2]
          est: (rows=1)
---
# Partition pruning of joined tables (relies on predicate push down)
N1
SELECT /*+ DISABLE_RULE('NestedLoopJoinConverter', 'HashJoinConverter', 'CorrelatedNestedLoopJoin') */ * FROM t1_n1n2n3 as t1, t2_n4n5 as t2 WHERE t1.c1 = t2.c1 and t1.id = 1 and t2.id = 42
---
Fragment#0 root
  distribution: single
  executionNodes: [N1]
  exchangeSourceNodes: {1=[N2], 2=[N4]}
  tree: 
    MergeJoin
        predicate: =(C1, C1$0)
        fieldNames: [ID, C1, C2, ID$0, C1$0, C2$0]
        type: inner
        est: (rows=1)
      Receiver
          fieldNames: [ID, C1, C2]
          sourceFragmentId: 1
          est: (rows=1)
      Receiver
          fieldNames: [ID, C1, C2]
          sourceFragmentId: 2
          est: (rows=1)

Fragment#1
  distribution: table PUBLIC.T1_N1N2N3 in zone ZONE_1
  executionNodes: [N2]
  targetNodes: [N1]
  partitions: [T1_N1N2N3=[N2={1}]]
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      Sort
          collation: [C1 ASC]
          est: (rows=1)
        TableScan
            table: PUBLIC.T1_N1N2N3
            predicate: =(ID, 1)
            fieldNames: [ID, C1, C2]
            est: (rows=1)

Fragment#2
  distribution: table PUBLIC.T2_N4N5 in zone ZONE_2
  executionNodes: [N4]
  targetNodes: [N1]
  partitions: [T2_N4N5=[N4={0}]]
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      Sort
          collation: [C1 ASC]
          est: (rows=1)
        TableScan
            table: PUBLIC.T2_N4N5
            predicate: =(ID, 42)
            fieldNames: [ID, C1, C2]
            est: (rows=1)
---
# Self join, different predicates that produce same set of partitions
N1
SELECT /*+ DISABLE_RULE('NestedLoopJoinConverter', 'HashJoinConverter', 'CorrelatedNestedLoopJoin') */ * FROM t1_n1n2n3 as t1, t1_n1n2n3 as t2 WHERE t1.c1 = t2.c1 and t1.id = 1 and t2.id = 17
---
Fragment#0 root
  distribution: single
  executionNodes: [N1]
  exchangeSourceNodes: {1=[N2], 2=[N2]}
  tree: 
    MergeJoin
        predicate: =(C1, C1$0)
        fieldNames: [ID, C1, C2, ID$0, C1$0, C2$0]
        type: inner
        est: (rows=1)
      Receiver
          fieldNames: [ID, C1, C2]
          sourceFragmentId: 1
          est: (rows=1)
      Receiver
          fieldNames: [ID, C1, C2]
          sourceFragmentId: 2
          est: (rows=1)

Fragment#1
  distribution: table PUBLIC.T1_N1N2N3 in zone ZONE_1
  executionNodes: [N2]
  targetNodes: [N1]
  partitions: [T1_N1N2N3=[N2={1}]]
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      Sort
          collation: [C1 ASC]
          est: (rows=1)
        TableScan
            table: PUBLIC.T1_N1N2N3
            predicate: =(ID, 1)
            fieldNames: [ID, C1, C2]
            est: (rows=1)

Fragment#2
  distribution: table PUBLIC.T1_N1N2N3 in zone ZONE_1
  executionNodes: [N2]
  targetNodes: [N1]
  partitions: [T1_N1N2N3=[N2={1}]]
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      Sort
          collation: [C1 ASC]
          est: (rows=1)
        TableScan
            table: PUBLIC.T1_N1N2N3
            predicate: =(ID, 17)
            fieldNames: [ID, C1, C2]
            est: (rows=1)
---
# Self join, different predicates that produce disjoint set of partitions
N1
SELECT /*+ DISABLE_RULE('NestedLoopJoinConverter', 'HashJoinConverter', 'CorrelatedNestedLoopJoin') */ *
  FROM t1_n1n2n3 as t1, t1_n1n2n3 as t2
 WHERE t1.id = t2.id and t1.id IN (1, 3) and t2.id IN (42, 44)
---
Fragment#0 root
  distribution: single
  executionNodes: [N1]
  exchangeSourceNodes: {1=[N2, N3]}
  tree: 
    Receiver
        fieldNames: [ID, C1, C2, ID$0, C1$0, C2$0]
        sourceFragmentId: 1
        est: (rows=1)

Fragment#1
  distribution: table PUBLIC.T1_N1N2N3 in zone ZONE_1
  executionNodes: [N2, N3]
  targetNodes: [N1]
  partitions: [T1_N1N2N3=[N2={1}, N3={2}]]
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=32316)
      MergeJoin
          predicate: =(ID, ID$0)
          fieldNames: [ID, C1, C2, ID$0, C1$0, C2$0]
          type: inner
          est: (rows=32316)
        Sort
            collation: [ID ASC]
            est: (rows=56847)
          TableScan
              table: PUBLIC.T1_N1N2N3
              predicate: SEARCH(ID, Sarg[1, 3])
              fieldNames: [ID, C1, C2]
              est: (rows=56847)
        Sort
            collation: [ID ASC]
            est: (rows=56847)
          TableScan
              table: PUBLIC.T1_N1N2N3
              predicate: SEARCH(ID, Sarg[42, 44])
              fieldNames: [ID, C1, C2]
              est: (rows=56847)
---
# Correlated
# Prune partitions from left arm statically, and pass meta to the right arm.
# Same set of nodes.
N0
SELECT * FROM t1_n1n2n3 as cor WHERE cor.id = 42 and EXISTS (SELECT 1 FROM t3_n1n2n3 as t2 WHERE t2.id = cor.id)
---
Fragment#0 root
  distribution: single
  executionNodes: [N0]
  exchangeSourceNodes: {1=[N3], 2=[N1, N2, N3]}
  tree: 
    CorrelatedNestedLoopJoin
        predicate: true
        type: inner
        correlates: [$cor3]
        est: (rows=1)
      Receiver
          fieldNames: [ID, C1, C2]
          sourceFragmentId: 1
          est: (rows=1)
      Receiver
          fieldNames: []
          sourceFragmentId: 2
          est: (rows=1)

Fragment#1
  distribution: table PUBLIC.T1_N1N2N3 in zone ZONE_1
  executionNodes: [N3]
  targetNodes: [N0]
  partitions: [T1_N1N2N3=[N3={2}]]
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      TableScan
          table: PUBLIC.T1_N1N2N3
          predicate: =(ID, 42)
          fieldNames: [ID, C1, C2]
          est: (rows=1)

Fragment#2 correlated
  distribution: random
  executionNodes: [N1, N2, N3]
  targetNodes: [N0]
  exchangeSourceNodes: {3=[N1, N2, N3]}
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      Project
          fieldNames: []
          projection: []
          est: (rows=1)
        ColocatedHashAggregate
            group: [i]
            aggregation: []
            est: (rows=1)
          Receiver
              fieldNames: [i]
              sourceFragmentId: 3
              est: (rows=1)

Fragment#3 correlated
  distribution: random
  executionNodes: [N1, N2, N3]
  targetNodes: [N1, N2, N3]
  partitions: [T3_N1N2N3=[N1={0}, N2={1}, N3={2}]]
  tree: 
    Sender
        distribution: hash by [i]
        targetFragmentId: 2
        est: (rows=1)
      TableScan
          table: PUBLIC.T3_N1N2N3
          predicate: =(ID, $cor3.ID)
          fieldNames: [i]
          projection: [true]
          est: (rows=1)
---
# Correlated.
# Prune partitions from left arm statically, and pass meta to the right arm.
# Different sets of nodes.
N0
SELECT * FROM t1_n1n2n3 as cor WHERE cor.id = 42 and EXISTS (SELECT 1 FROM t2_n4n5 as t2 WHERE t2.id = cor.id)
---
Fragment#0 root
  distribution: single
  executionNodes: [N0]
  exchangeSourceNodes: {1=[N3], 2=[N4, N5]}
  tree: 
    CorrelatedNestedLoopJoin
        predicate: true
        type: inner
        correlates: [$cor3]
        est: (rows=1)
      Receiver
          fieldNames: [ID, C1, C2]
          sourceFragmentId: 1
          est: (rows=1)
      Receiver
          fieldNames: []
          sourceFragmentId: 2
          est: (rows=1)

Fragment#1
  distribution: table PUBLIC.T1_N1N2N3 in zone ZONE_1
  executionNodes: [N3]
  targetNodes: [N0]
  partitions: [T1_N1N2N3=[N3={2}]]
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      TableScan
          table: PUBLIC.T1_N1N2N3
          predicate: =(ID, 42)
          fieldNames: [ID, C1, C2]
          est: (rows=1)

Fragment#2 correlated
  distribution: random
  executionNodes: [N4, N5]
  targetNodes: [N0]
  exchangeSourceNodes: {3=[N4, N5]}
  tree: 
    Sender
        distribution: single
        targetFragmentId: 0
        est: (rows=1)
      Project
          fieldNames: []
          projection: []
          est: (rows=1)
        ColocatedHashAggregate
            group: [i]
            aggregation: []
            est: (rows=1)
          Receiver
              fieldNames: [i]
              sourceFragmentId: 3
              est: (rows=1)

Fragment#3 correlated
  distribution: random
  executionNodes: [N4, N5]
  targetNodes: [N4, N5]
  partitions: [T2_N4N5=[N4={0}, N5={1}]]
  tree: 
    Sender
        distribution: hash by [i]
        targetFragmentId: 2
        est: (rows=1)
      TableScan
          table: PUBLIC.T2_N4N5
          predicate: =(ID, $cor3.ID)
          fieldNames: [i]
          projection: [true]
          est: (rows=1)
---
