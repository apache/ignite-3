/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Apache.Ignite.Internal.Generators
{
    using System;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using System.Text.RegularExpressions;
    using Microsoft.CodeAnalysis;

    /// <summary>
    /// Generates source for ErrorGroups.
    /// </summary>
    [Generator]
    public sealed class ErrorGroupGenerator : ISourceGenerator
    {
        /// <inheritdoc/>
        public void Initialize(GeneratorInitializationContext context)
        {
            // No-op.
        }

        /// <inheritdoc/>
        public void Execute(GeneratorExecutionContext context)
        {
            var javaErrorGroupsFile = Path.GetFullPath(
                Path.Combine(
                    Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)!,
                    "..", // netcoreapp
                    "..", // Debug/Release
                    "..", // bin
                    "..", // Apache.Ignite.Internal.Generators
                    "..", // dotnet
                    "..", // platforms
                    "core",
                    "src",
                    "main",
                    "java",
                    "org",
                    "apache",
                    "ignite",
                    "lang",
                    "ErrorGroups.java"));

            if (!File.Exists(javaErrorGroupsFile))
            {
                throw new Exception("File not found: " + javaErrorGroupsFile);
            }

            var javaErrorGroupsText = File.ReadAllText(javaErrorGroupsFile);

            // ErrorGroup TX_ERR_GROUP = ErrorGroup.newGroup("TX", 7);
            var javaErrorGroups = Regex.Matches(
                    javaErrorGroupsText,
                    @"ErrorGroup ([\w_]+)_ERR_GROUP = ErrorGroup.newGroup\(""(\w+)"", (\d+)\);")
                .Cast<Match>()
                .Select(x => (Name: x.Groups[1].Value, ShortName: x.Groups[2].Value, Code: int.Parse(x.Groups[3].Value, CultureInfo.InvariantCulture)))
                .ToList();

            if (javaErrorGroups.Count == 0)
            {
                throw new Exception($"Failed to parse Java error groups from '{javaErrorGroupsFile}'");
            }

            var sb = new StringBuilder();

            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("namespace Apache.Ignite");
            sb.AppendLine("{");
            sb.AppendLine("    public static partial class ErrorGroup");
            sb.AppendLine("    {");

            foreach (var (grpName, grpShortName, grpCode) in javaErrorGroups)
            {
                sb.AppendLine($"        /// <summary> {grpName} errors. </summary>");
                sb.AppendLine($"        public static class TODO - extract class name");

                // TX_STATE_STORAGE_CREATE_ERR = TX_ERR_GROUP.registerErrorCode(1)
                var javaErrors = Regex.Matches(
                        javaErrorGroupsText,
                        @"([\w_]+) = " + grpName + @"_ERR_GROUP\.registerErrorCode\((\d+)\);")
                    .Cast<Match>()
                    .Select(x => (Name: x.Groups[1].Value, Code: int.Parse(x.Groups[2].Value, CultureInfo.InvariantCulture)))
                    .ToList();

                if (javaErrors.Count == 0)
                {
                    throw new Exception($"Failed to parse Java errors for group {grpName} from '{javaErrorGroupsFile}'");
                }

                foreach (var (errName, errCode) in javaErrors)
                {
                    var expectedDotNetName = SnakeToCamelCase(errName)[..^3];
                }
            }

            sb.AppendLine("    }");


            var source = $@"// <auto-generated/>
namespace Apache.Ignite
{{
    public static partial class ErrorGroup
    {{
        /// <summary> Transaction errors. </summary>
        public static class Transactions
        {{
            /// <summary> Group code. </summary>
            public const int GroupCode = 7;
        }}
    }}
}}";

            context.AddSource("ErrorGroup.g.cs", source);
        }

        private static string SnakeToCamelCase(string str) =>
            string.Concat(str.Split('_').Select(x => x[..1].ToUpperInvariant() + x[1..].ToLowerInvariant()));
    }
}
