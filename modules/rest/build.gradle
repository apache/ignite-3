/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/buildscripts/java-core.gradle"
apply from: "$rootDir/buildscripts/publishing.gradle"
apply from: "$rootDir/buildscripts/java-junit5.gradle"
apply from: "$rootDir/buildscripts/java-test-fixtures.gradle"
apply from: "$rootDir/buildscripts/java-integration-test.gradle"

description = 'ignite-rest'

dependencies {
    annotationProcessor project(':ignite-configuration-annotation-processor')
    annotationProcessor libs.micronaut.inject.annotation.processor
    annotationProcessor libs.micronaut.openapi

    implementation project(':ignite-api')
    implementation project(':ignite-configuration')
    implementation project(':ignite-rest-api')
    implementation project(':ignite-core')
    implementation project(':ignite-network')
    implementation project(':ignite-cluster-management')
    implementation project(':ignite-metrics')
    implementation libs.jetbrains.annotations
    implementation libs.micronaut.inject
    implementation libs.micronaut.http.server.netty
    implementation libs.micronaut.openapi
    implementation libs.jackson.databind
    implementation libs.auto.service.annotations
    implementation libs.typesafe.config

    annotationProcessor libs.auto.service

    testAnnotationProcessor project(':ignite-configuration-annotation-processor')
    testAnnotationProcessor libs.micronaut.inject.annotation.processor

    testImplementation project(':ignite-configuration')
    testImplementation(testFixtures(project(':ignite-core')))
    testImplementation(testFixtures(project(':ignite-configuration')))
    testImplementation libs.hamcrest.core
    testImplementation libs.slf4j.jdk14
    testImplementation libs.micronaut.junit5
    testImplementation libs.micronaut.http.client

    integrationTestAnnotationProcessor libs.micronaut.inject.annotation.processor
    integrationTestAnnotationProcessor testFixtures(project(':ignite-core'))
    integrationTestAnnotationProcessor testFixtures(project(':ignite-cluster-management'))

    integrationTestImplementation project(':ignite-rest-api')
    integrationTestImplementation project(':ignite-network')
    integrationTestImplementation project(':ignite-api')
    integrationTestImplementation testFixtures(project(':ignite-core'))
    integrationTestImplementation testFixtures(project(':ignite-cluster-management'))
    integrationTestImplementation libs.micronaut.junit5
    integrationTestImplementation libs.micronaut.test
    integrationTestImplementation libs.micronaut.http.client
    integrationTestImplementation libs.micronaut.http.server.netty
    integrationTestImplementation libs.typesafe.config
}

compileJava {
    options.fork = true
    options.forkOptions.jvmArgs += '-Dmicronaut.openapi.config.file=openapi/openapi.properties'
}
