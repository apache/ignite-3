/*
 *  Copyright (C) GridGain Systems. All Rights Reserved.
 *  _________        _____ __________________        _____
 *  __  ____/___________(_)______  /__  ____/______ ____(_)_______
 *  _  / __  __  ___/__  / _  __  / _  / __  _  __ `/__  / __  __ \
 *  / /_/ /  _  /    _  /  / /_/ /  / /_/ /  / /_/ / _  /  _  / / /
 *  \____/   /_/     /_/   \_,__/   \____/   \__,_/  /_/   /_/ /_/
 */

package org.apache.ignite.migrationtools.tests.e2e.impl;

import static org.assertj.core.api.Assertions.assertThat;

import com.google.auto.service.AutoService;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import org.apache.ignite.examples.model.Person;
import org.apache.ignite.migrationtools.tests.e2e.framework.core.ExampleBasedCacheTest;

/** PersonCacheTest. */
@AutoService(ExampleBasedCacheTest.class)
public class PersonCacheTest extends VeryBasicAbstractCacheTest<Integer, Person> {

    public PersonCacheTest() {
        super(Integer.class, Person.class);
    }

    @Override
    public String getTableName() {
        return "MyPersonPojoCache";
    }

    @Override
    public Map.Entry<Integer, Person> supplyExample(int seed) {
        Person p = new Person((long) seed, 1_000_000L + seed, "Some First Name", "Some Last Name", 200.25 * seed, "Unremarkable");
        return Map.entry(seed, p);
    }

    @Override
    protected void assertResultSet(ResultSet rs, Person expectedObj) throws SQLException {
        // TODO: This could be autogenerated as well.
        assertThat(rs.getLong("ID")).isEqualTo(expectedObj.id);
        assertThat(rs.getLong("orgId")).isEqualTo(expectedObj.orgId);
        assertThat(rs.getString("firstName")).isEqualTo(expectedObj.firstName);
        assertThat(rs.getString("lastName")).isEqualTo(expectedObj.lastName);
        assertThat(rs.getString("resume")).isEqualTo(expectedObj.resume);
        assertThat(rs.getDouble("salary")).isEqualTo(expectedObj.salary);
    }
}
